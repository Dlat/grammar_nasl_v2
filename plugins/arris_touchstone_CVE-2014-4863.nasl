#
# (C) Tenable Network Security, Inc.
#

include("compat.inc");

if (description)
{
  script_id(78921);
  script_version("$Revision: 1.2 $");
  script_cvs_date("$Date: 2015/06/23 19:16:51 $");

  script_cve_id("CVE-2014-4863");
  script_bugtraq_id(69631);
  script_osvdb_id(110554);
  script_xref(name:"CERT", value:"855836");

  script_name(english:"ARRIS Touchstone DG950A SNMP Information Disclosure (CVE-2014-4863)");
  script_summary(english:"Queries SNMP for sensitive information.");

  script_set_attribute(attribute:"synopsis", value:
"The remote device is affected by an information disclosure
vulnerability.");
  script_set_attribute(attribute:"description", value:
"It is possible to read the plaintext password, SSID, and other
sensitive information from the remote ARRIS Touchstone cable modems
using an SNMP request.");
  script_set_attribute(attribute:"solution", value:"Disable the SNMP service on the device.");
  script_set_cvss_base_vector("CVSS2#AV:N/AC:L/Au:N/C:P/I:N/A:N");
  script_set_cvss_temporal_vector("CVSS2#E:ND/RL:U/RC:ND");
  script_set_attribute(attribute:"exploitability_ease", value:"Exploits are available");
  script_set_attribute(attribute:"exploit_available", value:"true");

  script_set_attribute(attribute:"vuln_publication_date", value:"2014/08/20");
  script_set_attribute(attribute:"plugin_publication_date", value:"2014/11/07");

  script_set_attribute(attribute:"plugin_type", value:"remote");
  script_set_attribute(attribute:"cpe", value:"cpe:/h:arris:touchstone_dg950a");
  script_end_attributes();

  script_category(ACT_GATHER_INFO);
  script_copyright(english:"This script is Copyright (C) 2014-2015 Tenable Network Security, Inc.");

  script_family(english:"SNMP");

  script_dependencies("arris_touchstone_cable_modem_detect.nbin", "snmp_default_communities.nasl");
  script_require_keys("Host/Arris/Touchstone/model");
  script_require_ports("SNMP/community", "SNMP/default/community");

  exit(0);
}

include("audit.inc");
include("global_settings.inc");
include("snmp_func.inc");
include("misc_func.inc");
include("string.inc");

# Jump out if no public community
community = get_kb_item("SNMP/community");
if (isnull(community) || community != "public")
{
  community = join(sep:" ", get_kb_list_or_exit("SNMP/default/community"));
  if (community !~ "public\s?") exit(0, "Device does not respond to the public community");
}

device    = "Arris Touchstone Cable Modem";
community = "public";  # It's specifically the public community
model     = get_kb_item_or_exit("Host/Arris/Touchstone/model");

# Limit to just this model
if ("DG950A" >!< model && !thorough_tests) audit(AUDIT_HOST_NOT, device+" DG950A");

port = get_kb_item("SNMP/port");
if (isnull(port)) port = 161;

# Port / Sock checks
if (!get_udp_port_state(port)) audit(AUDIT_PORT_CLOSED, port);

soc = open_sock_udp(port);
if (!soc) audit(AUDIT_SOCK_FAIL, port);

# Try the request
password = snmp_request(socket:soc, community:community, oid:"1.3.6.1.4.1.4491.2.4.1.1.6.1.2.0");
ssid     = snmp_request(socket:soc, community:community, oid:"1.3.6.1.4.1.4115.1.20.1.1.3.22.1.2.12");

if (!isnull(password) || !isnull(ssid))
{
  if (report_verbosity > 0)
  {
    report =
    '\n' + 'The following information was obtained from the device : ';
    if (!isnull(password)) report +=
    '\n' + '  Password : '+mask_string(password,mask_length:0);
    if (!isnull(ssid)) report +=
    '\n' + '  SSID     : '+ssid;
    security_warning(port:port, extra:report+'\n', protocol:"udp");
  }
  else security_warning(port:port, protocol:"udp");
}
else audit(AUDIT_DEVICE_NOT_VULN, device);
