#TRUSTED 562a9e7e74a167a983f14e3218e3bf62799d3405b3f3dc1cdab2be9deff8e11f3493a513785afb73e2c9f01427d5d80ee52b894af0218f268bd65d4d96badf812cd77f438322dc085fe43e57431f570fa2a8a7f2fbbdf25248ecfc497ab7608726a1401726b5f573d573057a33a2d2b277ab80cb2cc7b52643ed83d0d89cad52da4b8fc42c5a792566b877583c0efcd49d9e0a1b9df042a91d3c2b0f174b19d2e164792c6216961dccb17927354d79b1039d60f2db0275047771d06d18a6387d817e6559161c676fe7eca177dff03fbea6ae5a4b1fdce572a1cdfeafd5496d32a65c9142ad89399e7a2f25882ea320187763b7eaa25ddc68a0712c59e21006b695cf97b0ab894ec247ab41b24691cc2ff46537984d1b7c58e0def434078797d398efe9c2104f9bc35418779c549a14037727a07fd3691c68d05a7f3b56d00a9db0610b78af14de404797663a6e34a48bf9106d869c0b3782ab6fb35dcbe8ff593519d179424e51083fe9c115b9fa83b7bf256a919e5937a26bd6ed9dba7df9fe74c2e6e727e0439ad82aa38e9e9bf835bf5cf02690bd75f9a9879ba597d9ca9fc579cc970e28e7381c0bb80a71c9e592e8d02263f48b4464d1a5adc739a190d0e219c030f0e296b6cb63b9bbe6fb8a09cad5e13e810483a725588ec7d4fb534fbac3f72b9c377d509d91dfc473cf31f37c3d15a8effc00c0857890bb0835c6d6

#
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security, Inc.
#
# @NOGPL@
#
# Revision
#

##
# Initiates the connection to the server. The connection starts
# out by the client sending a connection string. This is followed
# by the server responding with multiple '\n' terminated lines.
# The server response ends with a single '\n'. Example:
#
# 'HELO:12.1.3.0.0.false\n'
# 'AS:2048\n'
# 'HL:19\n'
# 'MS:10000000\n'
# '\n'
#
# After the server response is successfully read in we extract
# the version information from the HELO message.
#
# WARNING: this function audits on failure
# @param sock - the socket to talk over
# @return the version string
##
function t3_connect(sock)
{
	# initiate the t3 handshake
	send(socket:sock, data:'t3 12.2.1\nAS:255\nHL:19\nMS:10000000\n\n');

	# the server response is sent in multi '\n' terminated
	# lines. Keep reading lines until we get an empty line
	# or failure
	local_var t3_line = '';
	local_var server_response = '';
	do
	{
		t3_line = recv_line(socket:sock, length:1024);
		if (isnull(t3_line)) exit(1, "Failed to complete t3 handshake.");

		server_response += t3_line;
	}
	while (t3_line != '\n');

	local_var item = eregmatch(pattern:"^HELO:((\d+\.?){3,5})\.", string:server_response);
	if (isnull(item)) exit(1, "Failed to find the t3 server HELO message.");

	return item[1];
}

##
# Adds a four byte length field to the front of the data and
# sends over the socket. Because send() doesn't guarantee full
# delivery and the payload can be quite large this function
# has extra logic to ensure all data gets sent.
#
# WARNING: If send returns a strange value then this audits out
# @param sock - the socket to send on
# @param data - the data to send
# @return void
##
function send_t3(sock, data)
{
	local_var sent = 0;
	local_var total_len = len(data) + 4;
	local_var all_data = mkdword(total_len) + data;

	do
	{
		local_var result = send(socket:sock, data:all_data);
		if (result <= 0) exit(1, "Error sending data over t3.");
		else sent += result;

		# trim all_data if we are going to loop again
		if (sent != total_len)
		{
			all_data = substr(all_data, 0, result);
		}
	}
	while (total_len != sent)

	return;
}

##
# Reads four bytes from the socket in order to get the length of the
# t3 frame. Then reads in the entire frame. Returns the frame data.
#
# @param sock - the socket to receive from
# @return null on failure or the data
##
function recv_t3(sock)
{
	local_var get_length = recv(socket:sock, length:4, min:4);
	if (isnull(get_length)) return NULL;

	local_var length = getdword(get_length);
	if (length < 4) return NULL;

	length -= 4;
	local_var result = recv(socket:sock, length:length, min:length);

	return result;
}

###
# Builds an identity request object and sends it to the server. 
# Ensures that the server responds.
#
# WARNING: If recv goes badly then we audit out
# @param sock - the socket to send on
# @param data - the data to send
# @return void
###
function t3_send_ident_request(sock, port)
{
	# send the "identity" object
    local_var identity = '\x01\x65\x01\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x6a\x00\x00\xea\x60\x00\x00\x00\x19\x00\x93\x7b\x48\x4a\x56\xfa\x4a\x77\x76\x66\xf5\x81\xda\xa4\xf5\xb9\x0e\x2a\xeb\xfc\x60\x74\x99\xb4\x02\x79\x73\x72\x00\x78\x72\x01\x78\x72\x02\x78\x70\x00\x00\x00\x0a\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x06\x00\x70\x70\x70\x70\x70\x70\x00\x00\x00\x0a\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x06\x00\x70\x06\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x08\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x03\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x03\x78\x70\x77\x02\x00\x00\x78\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x56\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x97\x22\x45\x51\x64\x52\x46\x3e\x02\x00\x03\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x74\x00\x27\x5b\x4c\x77\x65\x62\x6c\x6f\x67\x69\x63\x2f\x63\x6f\x6d\x6d\x6f\x6e\x2f\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2f\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\x3b\x4c\x00\x0e\x72\x65\x6c\x65\x61\x73\x65\x56\x65\x72\x73\x69\x6f\x6e\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x12\x76\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x41\x73\x42\x79\x74\x65\x73\x74\x00\x02\x5b\x42\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x08\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x71\x00\x7e\x00\x04\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x04\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x04\x78\x70\x77\x02\x00\x00\x78\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x1d\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x43\x6c\x61\x73\x73\x54\x61\x62\x6c\x65\x45\x6e\x74\x72\x79\x2f\x52\x65\x81\x57\xf4\xf9\xed\x0c\x00\x00\x78\x70\x72\x00\x21\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x65\x65\x72\x49\x6e\x66\x6f\x58\x54\x74\xf3\x9b\xc9\x08\xf1\x02\x00\x06\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x74\x00\x27\x5b\x4c\x77\x65\x62\x6c\x6f\x67\x69\x63\x2f\x63\x6f\x6d\x6d\x6f\x6e\x2f\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2f\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\x3b\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x56\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x97\x22\x45\x51\x64\x52\x46\x3e\x02\x00\x03\x5b\x00\x08\x70\x61\x63\x6b\x61\x67\x65\x73\x71\x00\x7e\x00\x03\x4c\x00\x0e\x72\x65\x6c\x65\x61\x73\x65\x56\x65\x72\x73\x69\x6f\x6e\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x12\x76\x65\x72\x73\x69\x6f\x6e\x49\x6e\x66\x6f\x41\x73\x42\x79\x74\x65\x73\x74\x00\x02\x5b\x42\x78\x72\x00\x24\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x63\x6f\x6d\x6d\x6f\x6e\x2e\x69\x6e\x74\x65\x72\x6e\x61\x6c\x2e\x50\x61\x63\x6b\x61\x67\x65\x49\x6e\x66\x6f\xe6\xf7\x23\xe7\xb8\xae\x1e\xc9\x02\x00\x08\x49\x00\x05\x6d\x61\x6a\x6f\x72\x49\x00\x05\x6d\x69\x6e\x6f\x72\x49\x00\x0c\x72\x6f\x6c\x6c\x69\x6e\x67\x50\x61\x74\x63\x68\x49\x00\x0b\x73\x65\x72\x76\x69\x63\x65\x50\x61\x63\x6b\x5a\x00\x0e\x74\x65\x6d\x70\x6f\x72\x61\x72\x79\x50\x61\x74\x63\x68\x4c\x00\x09\x69\x6d\x70\x6c\x54\x69\x74\x6c\x65\x71\x00\x7e\x00\x05\x4c\x00\x0a\x69\x6d\x70\x6c\x56\x65\x6e\x64\x6f\x72\x71\x00\x7e\x00\x05\x4c\x00\x0b\x69\x6d\x70\x6c\x56\x65\x72\x73\x69\x6f\x6e\x71\x00\x7e\x00\x05\x78\x70\x77\x02\x00\x00\x78\xfe\x00\xff\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x50\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x2e\x32\x32\x37\x00\x12\x57\x49\x4e\x2d\x41\x47\x44\x4d\x56\x51\x55\x42\x31\x54\x36\x2e\x65\x68\x83\x34\x8c\xd6\x00\x00\x00\x07\x00\x00';
	identity += mkword(port);
	identity += '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x78\xfe\x01\x00\x00\xac\xed\x00\x05\x73\x72\x00\x13\x77\x65\x62\x6c\x6f\x67\x69\x63\x2e\x72\x6a\x76\x6d\x2e\x4a\x56\x4d\x49\x44\xdc\x49\xc2\x3e\xde\x12\x1e\x2a\x0c\x00\x00\x78\x70\x77\x20\x01\x14\xdc\x42\xbd\x07\x1a\x77\x27\x00\x0d';
	# generate a somewhat random address that is used as a connection ID.
	identity += ((rand() % 155) + 100);
	identity += '\x2e';
	identity += ((rand() % 155) + 100);
	identity += '\x2e';
	identity += (rand() % 10);
	identity += '\x2e';
	identity += ((rand() % 155) + 100);
	identity += '\x61\x86\x3d\x1d\x00\x00\x00\x00\x78';
	send_t3(sock:sock, data:identity);

	# Ensure that the server responded to our identity with some type of response
	local_var result = recv_t3(sock:sock);
	if (isnull(result) || len(result) == 0) exit(1, "Failed to receive the identity response.");

	return;
}
